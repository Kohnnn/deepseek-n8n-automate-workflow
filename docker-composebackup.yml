# This docker-compose file follows best practices for data integrity and security
# - Uses environment variables from .env file
# - Mounts critical volumes to host directories to prevent data loss
# - Implements proper container dependencies with health checks
# - Sets resource limits for stability
# - Includes automated backups for n8n workflows

volumes:
  postgres_storage:
  redis_data:
  qdrant_storage:
  open-webui_data:
  changedetection_data:
  supabase_pg_data:
  # Avoid using named volumes for critical data - use host mounts instead

networks:
  demo:
    name: ai_stack_network
    driver: bridge

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      # Mount to host for data persistence
      - ./backups/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - demo
    restart: unless-stopped
    volumes:
      # Mount to host for data persistence
      - ./backups/redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # n8n Main - Main n8n instance for web UI and API
  n8n_main:
    image: n8nio/n8n:latest
    container_name: n8n-main
    restart: unless-stopped
    networks:
      - demo
    ports:
      - "${N8N_PORT}:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_HOST=${N8N_HOST}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
      - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED}
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=${N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_TIMEZONE=${N8N_TIMEZONE}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=${REDIS_HOST}
      - QUEUE_BULL_REDIS_PORT=${REDIS_PORT}
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - N8N_TRUSTED_PROXIES=n8nlocalhost.share.zrok.io,*
      # Execution data cleanup settings
      - N8N_EXECUTIONS_DATA_PRUNE=true
      - N8N_EXECUTIONS_DATA_MAX_AGE=48
      - N8N_EXECUTIONS_DATA_SAVE_ON_ERROR=true
      - N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS=false
      # Memory management settings
      - NODE_OPTIONS=--max-old-space-size=4096
      # Request and timeout settings
      - N8N_REQUEST_TIMEOUT=900000
      - N8N_WORKFLOW_OPERATION_TIMEOUT=900
      # Automated backup settings
      - N8N_PUSH_BACKUP_ENABLED=true
      - N8N_PUSH_BACKUP_INTERVAL=24
      - N8N_PUSH_BACKUP_PATH=/home/node/.n8n/backups
      # Recovery mechanism
      - N8N_RECOVERY_MODE=true
      # Ensure data integrity
      - N8N_REQUEST_TIMEOUT=300000
      - DB_POSTGRESDB_CONNECTION_TIMEOUT=60000
      - DB_POSTGRESDB_MAX=50
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
    volumes:
      # Mount to host for data persistence with multiple backup paths
      - ./backups/n8n:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./backups/n8n_workflows:/home/node/.n8n/workflows
      - ./backups/n8n_credentials:/home/node/.n8n/credentials
      - ./backups/n8n_binary_data:/home/node/.n8n/binaryData
      - ./backups/n8n_settings:/home/node/.n8n/settings
      - ./backups/n8n_backups:/home/node/.n8n/backups
      - ${LOCAL_SHARED_PATH}:/data/shared
      - ${DOCKER_FILE_PATH}:/local-dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      browserless:
        condition: service_started
      changedetection:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # n8n Worker - Processes queued workflow executions
  n8n_worker_1:
    image: n8nio/n8n:latest
    container_name: n8n-worker-1
    restart: unless-stopped
    networks:
      - demo
    entrypoint: ["node", "/usr/local/lib/node_modules/n8n/bin/n8n", "worker"]
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=${REDIS_HOST}
      - QUEUE_BULL_REDIS_PORT=${REDIS_PORT}
      - QUEUE_BULL_REDIS_DB=${REDIS_DB}
      - QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD=${QUEUE_BULL_REDIS_TIMEOUT}
      - N8N_TRUSTED_PROXIES=n8nlocalhost.share.zrok.io,*
      # Execution data cleanup settings
      - N8N_EXECUTIONS_DATA_PRUNE=true
      - N8N_EXECUTIONS_DATA_MAX_AGE=48
      - N8N_EXECUTIONS_DATA_SAVE_ON_ERROR=true
      - N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS=false
      # Memory management settings
      - NODE_OPTIONS=--max-old-space-size=4096
      # Request and timeout settings
      - N8N_REQUEST_TIMEOUT=900000
      - N8N_WORKFLOW_OPERATION_TIMEOUT=900
      # Ensure consistency with main instance
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_RECOVERY_MODE=true
    volumes:
      # Share the same n8n data with properly separated volumes for different data types
      - ./backups/n8n:/home/node/.n8n
      - ./backups/n8n_workflows:/home/node/.n8n/workflows
      - ./backups/n8n_credentials:/home/node/.n8n/credentials
      - ./backups/n8n_binary_data:/home/node/.n8n/binaryData
      - ${LOCAL_SHARED_PATH}:/data/shared
      - ${DOCKER_FILE_PATH}:/local-dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n_main:
        condition: service_started
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5678"]
      interval: 30s
      timeout: 10s
      retries: 5
        
  # N8N Backup Service - Scheduled database backups
  n8n_backup:
    image: postgres:16-alpine
    container_name: n8n-backup
    restart: unless-stopped
    networks:
      - demo
    volumes:
      - ./backups/n8n_db_backups:/backups
    environment:
      - PGHOST=${POSTGRES_HOST}
      - PGPORT=${POSTGRES_PORT}
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB}
    entrypoint: >
      sh -c '
      mkdir -p /backups;
      while true; do
        BACKUP_FILE="/backups/n8n_backup_$$(date +%Y%m%d_%H%M%S).sql";
        echo "Creating backup: $$BACKUP_FILE";
        pg_dump -Fc > "$$BACKUP_FILE";
        echo "Backup completed at $$(date)";
        find /backups -name "n8n_backup_*.sql" -type f -mtime +7 -delete;
        sleep 86400;
      done'
    depends_on:
      postgres:
        condition: service_healthy

  # Open WebUI - Web interface for AI models
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "${OPEN_WEBUI_PORT}:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # Mount to host for data persistence
      - ./backups/open-webui:/app/backend/data
    environment:
      - OLLAMA_API_BASE_URL=${OLLAMA_API_URL}

  # Qdrant - Vector database for AI applications
  qdrant:
    image: 'qdrant/qdrant:latest'
    container_name: qdrant
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT}:6333"
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    volumes:
      # Mount to host for data persistence
      - ./backups/qdrant:/qdrant/storage
    healthcheck:
      test:
        - CMD-SHELL
        - "bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1"
      interval: 5s
      timeout: 5s
      retries: 3

  # Browserless - Headless Chrome for web automation
  browserless:
    image: browserless/chrome
    container_name: browserless
    restart: unless-stopped
    networks:
      - demo
    ports:
      - "3001:${BROWSERLESS_PORT}"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    mem_limit: 4g
    memswap_limit: 4g
    environment:
      - HOST_NETWORK_ACCESS=true
      - MAX_CONCURRENT_SESSIONS=1
      - PROXY_HOST=false
      - PREBOOT_CHROME=true
      - TOKEN=${BROWSERLESS_TOKEN}
      - EXIT_ON_HEALTH_FAILURE=false
      - FUNCTION_ENABLE_INCOGNITO_MODE=true
      - SCREEN_WIDTH=1280
      - SCREEN_HEIGHT=720
      - SCREEN_DEPTH=16
      - ENABLE_CORS=true
      - ENABLE_API_GET=true
      - ENABLE_DEBUGGER=true
      - CHROME_REFRESH_TIME=120000
      - TIMEOUT=180000
      - CONNECTION_TIMEOUT=120000
      - DEFAULT_BLOCK_ADS=true
      - DEFAULT_STEALTH=true
      - DEFAULT_LAUNCH_ARGS=--disable-dev-shm-usage,--no-sandbox,--disable-setuid-sandbox,--dns-prefetch-disable=false,--disable-features=IsolateOrigins,--disable-web-security,--disable-features=site-per-process,--disable-site-isolation-trials,--memory-pressure-off
      - WORKSPACE_DELETE_EXPIRED=true
      - WORKSPACE_EXPIRE_MINUTES=5
      - KEEP_ALIVE=true
      - FUNCTION_ENABLE_HEALTH_CHECK=true
      - RETRY_ON_FAILURE=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ${DOCKER_FILE_PATH}:/local-dockerfile

  # ChangeDetection.io - Website change monitoring
  changedetection:
    image: dgtlmoon/changedetection.io
    container_name: changedetection
    restart: unless-stopped
    networks:
      - demo
    ports:
      - "5000:5000"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    mem_limit: 2g
    memswap_limit: 2g
    volumes:
      # Mount to host for data persistence
      - ./backups/changedetection:/datastore
      - ${DOCKER_FILE_PATH}:/local-dockerfile
    environment:
      - BASE_URL=http://localhost:5000
      - WEBDRIVER_URL=http://browserless:3000?token=${BROWSERLESS_TOKEN}&stealth=true&blockAds=true
      - PLAYWRIGHT_DRIVER_URL=ws://browserless:3000?token=${BROWSERLESS_TOKEN}&stealth=true&blockAds=true
      - FETCH_WORKERS=1
      - FETCH_TIMEOUT=180
      - WEBDRIVER_DELAY=15
      - PLAYWRIGHT_WAIT_UNTIL=networkidle
      - REQUESTS_TIMEOUT=180
      - PUID=1000
      - PGID=1000
      - IGNORE_RENDERING_ERRORS=true
      - BROWSER_TIMEOUT=180
      - WEBDRIVER_GOTO_TIMEOUT=180
      - PLAYWRIGHT_GOTO_TIMEOUT=180
      - BROWSER_SLEEP_TIME=15
      - BROWSER_NUM_RETRIES=3
      - CHECK_BROWSER_RUNNING_TIMEOUT=180
      - IGNORE_STATUS_CODES=403,404,429,500,502,503,504
      - PERFORMANCE_PROFILE=relaxed
      - MAX_QUEUE_WORKERS=1
      - PUPPET_CHROME_TIMEOUT=180
      - PUPPETEER_DEFAULT_STEALTH=true
      - DRIVER_REUSE_MODE=alpha
      - CHROME_VERSION=stable
      - DEFAULT_HEADERS={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36","Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8","Accept-Language":"en-US,en;q=0.9"}
    depends_on:
      browserless:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Selenium Chrome - For web automation and testing
  selenium-chrome:
    image: selenium/standalone-chrome
    container_name: selenium-chrome
    restart: unless-stopped
    networks:
      - demo
    ports:
      - "4444:4444"
    volumes:
      - ${DOCKER_FILE_PATH}:/local-dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # SockPuppet Browser - Alternative browser automation
  sockpuppetbrowser:
    image: dgtlmoon/sockpuppetbrowser:latest
    container_name: sockpuppetbrowser
    restart: unless-stopped
    networks:
      - demo
    ports:
      - "3002:3000"
    environment:
      - NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt
    volumes:
      - ${DOCKER_FILE_PATH}:/local-dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Supabase PostgreSQL Database
  supabase-db:
    image: supabase/postgres:15.1.0.147
    container_name: supabase-db
    restart: unless-stopped
    networks:
      - demo
    ports:
      - "5433:5432"
    volumes:
      # Mount to host for data persistence
      - ./backups/supabase:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10 